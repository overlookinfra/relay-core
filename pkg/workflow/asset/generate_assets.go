// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 7392,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xcd\x6e\xdc\x36\x10\xbe\xef\x53\x0c\x94\x00\xbd\xc4\xdd\xe6\x54\xc0\x37\x27\x6d\x80\x00\x29\x6c\xc4\x49\x73\x08\x72\xe0\x4a\xa3\x15\xb3\x14\xc9\x90\xd4\xda\x0b\xc3\xef\x5e\x90\xd4\x1f\x25\xae\xbc\xd2\xda\x68\x0e\xb1\x25\x71\x66\x3e\x7e\xf3\x4b\xfa\x61\x05\x90\xbc\xd6\x69\x81\x25\x49\x2e\x21\x29\x8c\x91\x97\xeb\xf5\x4f\x2d\xf8\x85\x7f\xfb\xbb\x50\xdb\x75\xa6\x48\x6e\x2e\xfe\xf8\x73\xed\xdf\xbd\x4a\xde\x58\x39\x43\x0d\x43\x2b\xf5\x4d\xa8\x5d\xce\xc4\x9d\x7f\x9d\xa1\x4e\x15\x95\x86\x0a\x6e\x3f\x5e\xc1\x5d\xfd\x19\x32\xcc\x29\xa7\xee\x83\x57\x70\x90\x4e\x5e\x6c\x7e\x62\x6a\xfc\x3b\xa9\x84\x44\x65\x28\xea\xe4\x12\x2c\x3c\x80\x84\x48\xfa\x2f\x2a\xed\x15\xfa\x77\x3d\x69\x6d\x14\xe5\x5b\x27\xed\xde\x0f\xec\x7f\x29\xb0\x43\xe0\xf1\xc3\xbe\xd6\xd6\xca\x20\xaf\xca\xe4\x12\xbe\xd7\xcf\x00\xc9\xfe\x6d\x52\x3f\xfc\x70\x3f\x1f\xfd\xda\x64\x47\x79\xf6\x4c\x28\x9c\xe8\x04\x84\x96\xd6\x28\x10\x4e\x4a\x5c\x00\xe4\x8a\x83\x70\x0f\x84\x81\x55\x01\xb9\x50\x60\x7a\xe8\x3a\xc9\x92\xf2\x4f\xc8\xb7\xa6\x48\x2e\xe1\x6d\x60\x5b\x57\x65\x49\xd4\x61\x89\x79\x28\xe8\xb6\xb8\x60\xb8\x47\x06\xb2\x50\x44\x23\xf8\x25\x1b\xca\xb7\x70\x57\x10\x13\xa0\x81\x4c\xa0\x3e\x05\x52\x68\x67\x3e\xac\x52\x28\x8b\xc4\x10\xca\x30\x83\xde\x67\x10\xf9\x6c\x7e\x0a\x51\xa2\x24\xdb\x73\xfd\xf3\xf5\xf3\x27\x30\x02\x08\xdc\xe1\x46\x53\x33\xe5\xab\x5c\xa8\x92\x18\xab\xa0\x52\x34\x09\x9d\x25\x2a\x95\x3e\x13\x94\xbe\xf1\xdf\x34\x90\xca\x14\x42\x51\x43\x0c\xdd\x23\x78\x43\x90\x8a\x0c\x81\x89\x94\x98\x20\xc5\x26\x10\x1a\xb2\xd5\x31\x7c\x44\x29\x72\x38\x09\x1e\xa3\xda\x58\x47\xe5\x0a\xf1\xc2\x5a\x02\x46\x36\xc8\xb4\xc5\x5c\x20\x93\x20\x51\x48\x86\x90\x53\x9e\x1d\x61\x90\x1a\x2c\xfb\x28\x8e\xf3\x14\x75\x3d\xc0\x63\xb0\x27\x4b\x00\x8b\xee\xaa\x57\xed\x62\xdb\xfa\x8c\x95\x26\x1b\x8b\xb5\xdd\x4b\x46\x0c\x01\x2d\x31\xa5\x39\x4d\xbd\x1b\xa8\xee\xb6\x10\xd8\x95\x44\x91\x12\x0d\xaa\x93\x6c\x93\x2c\xa3\x9e\xc2\x9b\x71\xdd\x75\x2b\x5e\x2b\xcc\xad\xe4\xab\x75\x57\xbd\xf5\xfa\xa6\xb1\x92\x44\x37\xaf\x0d\xca\x05\x1e\xfd\x54\x7b\xb1\x2b\x94\x4e\x4f\x3f\xe1\x3e\xd6\x5e\x7a\x3b\xe5\xb7\x38\xe6\x5b\x83\x32\x0e\xd7\x28\xba\xdd\x1e\x61\x6c\x26\xe2\x56\xd5\x7c\x7c\x5f\xbc\xe8\x00\xe2\xaa\x86\x99\xf4\x96\x76\x9d\xf1\xd6\x75\x92\x0f\x14\x59\xb4\x29\x3d\x11\x6a\x57\x6d\x9d\x13\xca\x95\xb9\x83\xc4\x0c\x28\xf7\xa9\x1a\x64\x6f\xa4\x2d\xf7\x2d\x75\x6f\xa6\xd2\x26\x86\x60\x4f\x58\x85\x61\x2b\x3c\x9a\x61\x0d\x29\xad\xe7\x00\x12\x85\xbf\x2a\xaa\xd0\x6e\xff\xbb\xb7\x1c\xb6\xc9\xbf\xef\xa5\x42\x3d\x9c\x1d\xc6\xa5\x04\xdb\x75\x80\x16\x13\x31\x98\xc1\xe6\xe0\x8a\xc5\x86\xa4\x3b\xe4\x59\x98\x68\x5d\x0a\x2c\x21\xbe\x0d\x98\x36\x5f\x87\xd3\xd1\x24\xed\x19\xe6\xa4\x62\x66\xc8\xfc\xc0\xcc\x5f\x7e\x55\xcf\x86\x63\x3b\xe9\xe8\x7c\xb3\x3a\x22\xbb\xd4\xa1\xd7\x4d\x45\xee\xef\xab\x5b\x31\xc7\xc5\x01\xdb\x2e\x79\xcf\x22\xda\xd6\x92\x59\x1c\x0f\x06\xac\xb9\x4c\x7c\xe5\xf4\x57\x85\x03\xfb\x4e\xe7\x29\x24\x04\x8e\x91\xc8\x33\x7d\x3d\x72\xcb\xc0\xe0\xad\xdf\xa0\x5d\x8c\x3c\xa5\xbd\xb1\xc9\xad\x16\x1c\xaf\xf3\x60\xc0\xb4\xff\x1e\x82\xa7\xe9\x1d\x4e\xe0\x1d\x60\x9e\xd4\x1c\x56\xd4\xf6\xf3\xb8\x4e\x9e\x8a\x69\x12\x55\x17\x50\xe3\xa7\x1f\x27\xd6\x95\x41\x4c\x34\xe3\x78\xbb\x76\x4c\xed\xc3\xb1\x22\xff\x5e\x70\x43\x28\x47\xe5\x02\xba\xcf\xd9\x51\x91\x2b\x29\x95\xd8\x13\x56\x4b\x44\x0f\x03\xad\xda\x7f\xe8\x3d\x0d\x2a\xdd\xb1\xe8\xa6\x65\x38\x9f\x3e\x45\xf4\xa8\xb6\x88\x74\x87\x0a\x9c\x1a\x37\x97\xba\xf8\xc6\x7b\x4c\xab\x93\x33\xbd\x17\xe4\xa9\x28\x4b\x12\x9c\xac\xe6\x02\x7a\xef\x35\xd8\xf1\x88\x6a\x5d\xcd\x4e\x33\xa2\xb6\xc3\xf0\x9b\x08\xd9\x63\xd6\x89\xda\x56\x25\x72\x33\x48\xbe\x78\x70\x0f\xb7\xd7\xfb\xf8\x18\xc5\x48\xb9\xac\xcc\x07\xca\xce\x71\x9c\x3d\x89\x2a\x64\x7e\x64\x97\xc4\x14\xee\x88\xc1\x21\xa7\x0c\xed\xaf\x95\xee\xce\x19\xce\x1e\x78\xf1\xb9\x7c\x3a\xd9\xe5\x84\x7e\xec\x99\xb6\xb0\x7c\x64\xe1\xf3\xd1\x7a\x62\xc6\xfb\x3c\x99\x4e\xba\x61\x73\x9a\x33\x2c\xa5\x82\x6b\x77\x2a\x4a\x1b\x6d\xc9\x04\x46\xc2\xd8\xec\x4a\xe3\x4b\xc2\x91\xc2\x11\x14\x97\x73\xb7\x40\x6a\x65\x53\x3b\x78\x6a\x5e\x6b\xa6\xe0\xb3\x7a\x7d\x3d\x85\xff\x9f\xed\xbe\x81\xb0\xa4\xe3\x8f\x4e\xec\xf0\xe4\xa9\xe1\xd6\x8b\x44\xd5\x6d\x28\xcf\x2c\xfc\x39\xfa\xde\xd5\x32\x51\x85\x77\x05\x8e\x86\x91\xb8\xb6\xde\xf4\xbd\xac\xd7\x8e\x59\x89\x86\x71\xc8\xc2\xb3\xc4\x4e\x7d\x9b\x11\x0b\xa1\x19\xfd\xde\x1e\xd0\xb2\x8a\x61\x08\xf0\xa4\xbe\x7f\x53\xe9\x62\x81\xd8\x37\xdc\x14\x42\xec\x86\x92\x51\xda\xe2\xe8\x96\xd0\xa7\x6b\x4d\xa7\xd0\xb7\xa8\xb6\x34\x06\xe2\x11\xd9\x7e\x3d\xaf\x2f\xe6\x36\x12\x91\xa7\x07\x37\x45\xf0\xbd\xd8\xa1\xbf\x6b\x69\x76\x55\x9f\x12\xdd\x29\xd9\x75\xc8\x54\x09\x0e\xfa\xc0\x0d\xb9\x9f\x1f\xe1\x83\x53\xef\x68\x8f\xa1\xb3\xc6\xf1\xb0\xc4\x51\xb2\xd2\xc5\x8b\x39\xc9\x2a\x3f\xee\x20\xf7\x27\x86\xa8\x7b\x06\xa8\xa3\xc8\x7b\xb7\x7d\xcd\xfd\xb9\x00\xe4\xb9\xb0\x3b\xb0\x4e\xa8\x36\x25\x35\xf6\xd4\x8e\x7b\xe4\xc6\x5d\x9a\x85\x1a\x9f\xbc\xec\x82\x89\xcb\xa3\xde\x45\xcb\x59\xf3\x84\xdb\x72\xd4\xbf\xd1\xc4\x5d\x54\xca\xbc\xa2\x17\xf3\x72\xad\xff\xa5\xe7\x94\xb9\x23\xc3\xbb\x51\x9b\x3b\x9d\xb2\x86\xaa\xba\x55\xce\xe2\x6a\x87\x87\x73\x6e\xc0\x7a\x71\xbd\xc3\x43\x8b\xc0\x4e\xe2\x6e\xa4\x60\x07\xa0\x19\x72\x43\xf3\x83\x1d\xd3\x5d\x70\xcf\x1d\x28\xa2\x97\xc2\x53\x0c\xc5\x90\xb6\x17\x5e\x0d\x46\xdd\x1c\x17\xec\x3c\xd0\x50\xe8\x6f\xcd\xe2\x40\xcf\x49\xc0\xd8\x24\x11\xcd\xbf\x55\xf3\xff\xe3\xea\x71\xf5\x5f\x00\x00\x00\xff\xff\xc8\xef\x39\xd7\xe0\x1c\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
