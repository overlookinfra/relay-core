name: CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: '1.14'
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/go/pkg/sumdb
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Set up Buildah
      run: |
        mkdir -p ~/.config/containers
        cp -r hack/containers/* ~/.config/containers
    - name: Build
      run: scripts/ci build
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - k3s-image: rancher/k3s:v1.21.4-k3s1
          k3s-containerd-config-version: v1.19
          gvisor-version: latest
        - k3s-image: rancher/k3s:v1.20.10-k3s1
          k3s-containerd-config-version: v1.19
          gvisor-version: latest
        - k3s-image: rancher/k3s:v1.19.14-k3s1
          k3s-containerd-config-version: v1.19
          gvisor-version: '20210301.0'
        - k3s-image: rancher/k3s:v1.18.20-k3s1
          k3s-containerd-config-version: v1.16
          gvisor-version: '20210301.0'
    env:
      KUBECONFIG: /tmp/kubeconfig
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: '1.14'
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/go/pkg/sumdb
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Download gVisor
      run: |
        mkdir -p ${{ runner.temp }}/gvisor && cd ${{ runner.temp }}/gvisor
        for binary in runsc containerd-shim-runsc-v1; do
          for file in "${binary}" "${binary}.sha512"; do
            curl -L "https://storage.googleapis.com/gvisor/releases/release/${{ matrix.gvisor-version }}/$( uname -m )/${file}" \
              -o "${file}"
          done
          shasum -a 512 -c "${binary}.sha512"
          chmod +x "${binary}"
        done
    - id: install-k3d
      name: Install k3d
      run: curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
    - name: Set up Kubernetes cluster
      run: |
        k3d cluster create relay-core-test \
          --image ${{ matrix.k3s-image }} \
          --volume ${{ runner.temp }}/gvisor/runsc:/sbin/runsc \
          --volume ${{ runner.temp }}/gvisor/containerd-shim-runsc-v1:/sbin/containerd-shim-runsc-v1 \
          --volume ${{ github.workspace }}/hack/k3s/runsc.toml:/etc/containerd/runsc.toml \
          --volume ${{ github.workspace }}/hack/k3s/config-${{ matrix.k3s-containerd-config-version }}.toml.tmpl:/var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl \
          --k3s-server-arg '--flannel-backend=none' \
          --k3s-server-arg '--no-deploy=traefik' \
          --k3s-server-arg '--disable-network-policy'
    - name: Install Calico
      run: |
        kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
        for i in $( seq 10 ); do
          test -n "$( kubectl get crd installations.operator.tigera.io --ignore-not-found -o name )" && break
          sleep 5
        done
        kubectl wait --for=condition=established --timeout=60s crd installations.operator.tigera.io
        kubectl apply -f ${{ github.workspace }}/hack/k3s/calico.yaml
    - name: Review Docker containers
      if: always()
      run: docker ps -a
    - name: Review Docker logs for k3d
      if: success() || steps.install-k3d.outcome == 'success'
      run: |
        k3d node list --no-headers | cut -d' ' -f1 | xargs -n1 docker logs
    - id: test
      name: Test
      env:
        RELAY_TEST_E2E_KUBECONFIG: ${{ env.KUBECONFIG }}
        RELAY_TEST_E2E_GVISOR_HANDLER: runsc
      run: scripts/ci test
